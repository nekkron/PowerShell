#!/usr/bin/env bash

# Description: Checks for the PKFail vulnerability.
#
# Release Notes: Initial Release
#
# Checks keys for CNs with 'DO NOT TRUST' or 'DO NOT SHIP' and can save the result to a custom field.
# Requires the efitools package to be installed.
#
# Usage: [--customfield|-c <CustomFieldName>]
#
# Example:
#   --customfield "SecureBootPK"
#
#   [Info] Secure Boot is Trusted
#   [Info] Custom field value set successfully
#
# Example:
#   --customfield "SecureBootPK"
#
#   [Alert] Secure Boot is Not Trusted
#   [Info] Custom field value set successfully
#
# Links:
#     https://github.com/binarly-io/Vulnerability-REsearch/blob/main/PKfail/BRLY-2024-005.md
#     https://www.intel.com/content/www/us/en/security-center/announcement/intel-security-announcement-2024-07-25-001.html
#     https://www.supermicro.com/en/support/security_PKFAIL_Jul_2024
#

# These are all our preset parameter defaults. You can set these = to something if you would prefer the script defaults to a certain parameter value.
_arg_customfield=

# Help text function for when invalid input is encountered
print_help() {
    printf '\n\n%s\n\n' 'Usage: [--customfield|-c <arg>] [--help|-h]'
    printf '%s\n' 'Preset Parameter: --customfield "SecureBootPK"'
    printf '\t%s\n' "Name of a custom field to save the PKFail status to with either Trusted or Not Trusted."
}

# Determines whether or not help text is necessary and routes the output to stderr
die() {
    local _ret="${2:-1}"
    test "${_PRINT_HELP:-no}" = yes && print_help >&2
    echo "$1" >&2
    exit "${_ret}"
}

# Grabbing the parameters and parsing through them.
parse_commandline() {
    while test $# -gt 0; do
        _key="$1"
        case "$_key" in
        --customfield | -c)
            test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
            _arg_customfield="$2"
            shift
            ;;
        --customfield=*)
            _arg_customfield="${_key##--customfield=}"
            ;;
        --help | -h)
            _PRINT_HELP=yes die 0
            ;;
        *)
            _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
            ;;
        esac
        shift
    done
}

SetCustomField() {
    local _Name=$1
    local _Value=$2
    if [ -f "${NINJA_DATA_PATH}/ninjarmm-cli" ]; then
        if [ -x "${NINJA_DATA_PATH}/ninjarmm-cli" ]; then
            if "$NINJA_DATA_PATH"/ninjarmm-cli get "$_Name" >/dev/null; then
                # check if the value is greater than 10000 characters
                if [ ${#_Value} -gt 10000 ]; then
                    echo "[Warn] Custom field value is greater than 10000 characters"
                fi
                if ! echo "${_Value::10000}" | "$NINJA_DATA_PATH"/ninjarmm-cli set --stdin "$_Name"; then
                    echo "[Warn] Failed to set custom field"
                else
                    echo "[Info] Custom field value set successfully"
                fi
            else
                echo "[Warn] Custom Field ($_Name) does not exist or agent does not have permission to access it"
            fi
        else
            echo "[Warn] ninjarmm-cli is not executable"
        fi
    else
        echo "[Warn] ninjarmm-cli does not exist"
    fi
}

parse_commandline "$@"

# If script form is used replace commandline arguments
if [[ -n $customFieldName ]] && [[ "${customFieldName}" != "null" ]]; then
    _arg_customfield="$customFieldName"
fi

if ! [ -d "/sys/firmware/efi" ]; then
    die "[Error] System is not running in UEFI mode." 1
fi

# Check that efi-readvar is installed
if ! command -v efi-readvar &>/dev/null; then
    die "[Error] efi-readvar is not installed. Please install efitools and try again." 1
fi

_trusted="Not Trusted"

# Check if Secure Boot is supported on the system and if it is, output the result
output=$(efi-readvar -v PK)
if [[ -n $output ]]; then
    if [[ "$output" == *"DO NOT TRUST"* ]] || [[ "$output" == *"DO NOT SHIP"* ]]; then
        echo "[Alert] Secure Boot is Not Trusted"
    else
        echo "[Info] Secure Boot is Trusted"
        _trusted="Trusted"
    fi
else
    die "efi-readvar returned no output. Secure Boot is not enabled or supported on this system." 1
fi

# Check if the custom field is set and if it is, output the result
if [[ -n $_arg_customfield ]]; then
    SetCustomField "${_arg_customfield}" "${_trusted}"
fi




